# -*- coding: utf-8 -*-
"""ML_MiniProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xr6EVcZ3LeoqRPhg6t1wyWTHr-4zdmHT

# **SALARY PREDICTOR**

#Contributors
1429 Srsuhti Johari

1430 Gayatri Joshi

1432 Maithili Karle

1437 Daksha Kulkarni

### **OBJECTIVE**

**A relevant question is what determines the salary and the jobs these engineers **are offered right after graduation.
**Various factors such as college grades, candidate skills, the proximity of the **college to industrial hubs, the specialization one have,
**market conditions for specific industries determine this.**
**On the basis of these various factors,**
**your objective is to determine the salary of an engineering graduate in India. **

**INSPIRATION**

**The data can be used not only to make an accurate salary predictor but also to understand what influences salary and job titles in the labour market**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
plt.style.use('dark_background')        # where a dark background can make the plot elements stand out more prominently.

import io
from google.colab import files
uploaded= files.upload()

df = pd.read_csv(io.BytesIO(uploaded['salarypredict.csv']))
df.head()                                                                        # First 5 columns

df.shape     #2998 = Row     34 = columns

df.columns                             # Total num of cols

"""**DATA CLEANING**"""

df.drop(['ID', 'DOB', 'CollegeID', '12graduation' ,'10board', '12board' , 'CollegeState'                       # drop cols that are not neccessary
                                     ,'CollegeCityID', 'CollegeCityTier'
                                         ,'GraduationYear'], axis = 1, inplace = True)
df.head()

df = df.drop_duplicates()              # drop duplicates rows

df.info()                              # To check for null values in each cols

df.describe()      # mathematical description of dataset       #AMCAT = for placement

df.head()

df.Degree.unique()              # Unique values in "Degree" col

df.Specialization.unique()           # Too many unique value (Not good)

df.Specialization.value_counts()            # Count of each type of Specialization

specialization = df.Specialization.value_counts(ascending = False)
specialization

specializationlessthan10 = specialization[specialization<=10]    # specialization count <10 in one col
specializationlessthan10

def removespeciallessthan10(value):                        # Put all these specialization (<10)in other Section
    if value in specializationlessthan10:
        return 'other'
    else:
        return value
df.Specialization = df.Specialization.apply(removespeciallessthan10)
df.Specialization.unique()

df.head()

"""**DATA ANALYSIS AND VISUALIZATION**"""

plt.scatter(df.index, df['collegeGPA'])

df = df[(df['collegeGPA']>40)]
df.shape

plt.figure(figsize = (10,10))
plt.subplot(2,2,1)
plt.scatter(df.index, df.English)
plt.title('English')

plt.subplot(2,2,2)
plt.scatter(df.index, df.Logical)
plt.title('Logical')

plt.subplot(2,2,3)
plt.scatter(df.index, df.Quant)
plt.title('Quant')

plt.show()

df.head()

df.columns

plt.figure(figsize = (10,10))
plt.subplot(2,2,1)
plt.scatter(df.index, df.Domain)
plt.title('Domain')

plt.subplot(2,2,2)
plt.scatter(df.index, df.ComputerProgramming)
plt.title('ComputerProgramming')

plt.subplot(2,2,3)
plt.scatter(df.index, df.ElectronicsAndSemicon)
plt.title('ElectronicsAndSemicon')

plt.show()

df = df.replace(-1, np.nan)                 # replace -1 by NAN

cols_with_nan = [column for column in df.columns if df.isna().sum()[column] > 0]               # replace all NAN values by mean of that col
for column in cols_with_nan:
    df[column] = df[column].fillna(df[column].mean())

df.head()

sns.countplot(x=df.Gender, palette = 'inferno')

sns.scatterplot(x=df['10percentage'], y=df['12percentage'])

sns.scatterplot(x=df['10percentage'], y=df['12percentage'], hue = df.CollegeTier)

df.drop(['10percentage'], axis = 1, inplace = True)     # drop 10th percentage col as it is observed that if10th percentage linearly increases with 12th percentage.

plt.figure(figsize = (10,6))
sns.countplot(x=df['Specialization'])
plt.xticks(rotation = 90)

df.head()

plt.figure(figsize = (15,8))
sns.scatterplot(x=df.collegeGPA, y=df.Salary, hue = df.Specialization, palette = 'inferno')

plt.figure(figsize = (15,8))
sns.scatterplot(x=df.collegeGPA,y= df.Salary, hue = df.Degree, palette = 'inferno')

plt.figure(figsize = (12,6))
sns.scatterplot(x=df.openess_to_experience, y=df.Salary)

plt.figure(figsize = (12,6))
sns.scatterplot(x=df.Domain,y= df.Salary, hue = df.Degree, palette = 'inferno')

plt.figure(figsize = (8,5))
sns.heatmap(df.corr())

df.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df.Gender = le.fit_transform(df.Gender)
df.Degree = le.fit_transform(df.Degree)
df.Specialization = le.fit_transform(df.Specialization)

df.head()

"""**ALGORITHM IMPLEMENTATION**"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

from xgboost import XGBRegressor

x = df.drop('Salary', axis=1)
y = df['Salary']

sc = StandardScaler()
x = sc.fit_transform(x)

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=True, random_state=0)

xgb = XGBRegressor()
xgb.fit(X_train, y_train)

predictions = xgb.predict(X_test)
print(predictions)

diff = y_test - predictions

plt.figure(figsize = (12,6))
sns.distplot(diff)

xgb_r2_score = xgb.score(X_test, y_test)

print("XGBoost R2 Score: ", (xgb_r2_score))